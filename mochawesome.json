{
  "stats": {
    "suites": 10,
    "tests": 22,
    "passes": 1,
    "pending": 0,
    "failures": 21,
    "start": "2023-11-27T11:12:55.329Z",
    "end": "2023-11-27T11:13:37.779Z",
    "duration": 42450,
    "testsRegistered": 22,
    "passPercent": 4.545454545454546,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17bc94dd-b743-4a24-8900-ddae071ddd85",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "261b7830-2eb1-4d7a-bf38-5c78e225daec",
          "title": "Cloud functions template test. Shows how to run functions against emulators",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts",
          "file": "/src/functions/cloudFunctionTemplate.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Cloud functions template test. Shows how to run functions against emulators\"",
              "fullTitle": "Cloud functions template test. Shows how to run functions against emulators \"before all\" hook in \"Cloud functions template test. Shows how to run functions against emulators\"",
              "timedOut": false,
              "duration": 166,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const serviceAccountKeyFileName = './src/abonement-58b38-firebase-credentials.json';\nconst projectSettings = {\n    projectId: 'abonement-58b38',\n};\ncloudFunctionText(projectSettings, serviceAccountKeyFileName);\nadmin.firestore().settings({\n    host: 'localhost:8080',\n    ssl: false,\n    keyFilename: serviceAccountKeyFileName,\n});",
              "err": {},
              "uuid": "b3a6b61c-de2d-427a-a017-a4efc48d7956",
              "parentUUID": "261b7830-2eb1-4d7a-bf38-5c78e225daec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass using database and the emulators",
              "fullTitle": "Cloud functions template test. Shows how to run functions against emulators should pass using database and the emulators",
              "timedOut": true,
              "duration": 2213,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testValue = { value: 'original' };\nawait collectionService_1.db.collection('example').doc('test-doc').set(testValue);\nconst snap = await collectionService_1.db.collection('example').doc('test-doc').get();\nconst data = snap.data();\nassert.deepEqual(data, testValue);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "9b0b58ac-2968-4c18-a5f0-111d462fd620",
              "parentUUID": "261b7830-2eb1-4d7a-bf38-5c78e225daec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "creates a lesson and then finalizes it",
              "fullTitle": "Cloud functions template test. Shows how to run functions against emulators creates a lesson and then finalizes it",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await collectionService_1.db.collection('test_lessons').doc(exports.testLesson.id).set(exports.testLesson);\nassert.throws(async () => await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'text/plain',\n    },\n    body: exports.testLesson.id,\n}), Error);\nconst snap = await collectionService_1.db.collection('test_lessons').doc(exports.testLesson.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.done);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "024ebb35-90d8-4e63-b5d1-dcd8596e1668",
              "parentUUID": "261b7830-2eb1-4d7a-bf38-5c78e225daec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "runs a cloud scheduled function",
              "fullTitle": "Cloud functions template test. Shows how to run functions against emulators runs a cloud scheduled function",
              "timedOut": true,
              "duration": 2004,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const comingSoonLesson = Object.assign(Object.assign({}, exports.testLesson), { id: 'new-test-lisson-id', status: domain_1.LessonStatus.commingSoon });\nlessonScheduler_1.backendCollectionsCurrent.lessons.doc(exports.testLesson.id).set(comingSoonLesson);\nawait (0, lessonScheduler_1.lessonStartsUpdaterFunction)({\n    eventId: 'test-event-id',\n    timestamp: Date.now().toString(),\n    params: {},\n    eventType: 'test-event-type',\n    resource: {\n        service: 'test-service',\n        name: 'test-name',\n    },\n});\nconst snap = await lessonScheduler_1.backendCollectionsCurrent.lessons.doc(exports.testLesson.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.finished);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/cloudFunctionTemplate.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "6b348dc9-8dbc-4053-a800-f62d94d19e74",
              "parentUUID": "261b7830-2eb1-4d7a-bf38-5c78e225daec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9b0b58ac-2968-4c18-a5f0-111d462fd620",
            "024ebb35-90d8-4e63-b5d1-dcd8596e1668",
            "6b348dc9-8dbc-4053-a800-f62d94d19e74"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9252da12-ae46-430a-89b5-6db46cfe4009",
          "title": "lesson finalization tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts",
          "file": "/src/functions/lessonFinalization.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Can finalize lesson from finished status to done status with date cheking",
              "fullTitle": "lesson finalization tests 1. Can finalize lesson from finished status to done status with date cheking",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const finishedTestLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'finished-test-lisson-id', status: domain_1.LessonStatus.finished, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0 });\nawait collectionService_1.db.collection('test_lessons').doc(finishedTestLesson.id).set(finishedTestLesson);\nawait fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'text/plain',\n    },\n    body: finishedTestLesson.id,\n});\nconst snap = await collectionService_1.db.collection('test_lessons').doc(finishedTestLesson.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.done);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "f3ae67ce-f498-4c2d-a0ea-8bf787bc47ba",
              "parentUUID": "9252da12-ae46-430a-89b5-6db46cfe4009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. Attempt to finalize lesson with date later then now will fail with error",
              "fullTitle": "lesson finalization tests 2. Attempt to finalize lesson with date later then now will fail with error",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const dateInFuture = new Date();\ndateInFuture.setFullYear(dateInFuture.getFullYear() + 1);\nconst testLessonFromFuture = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'future-test-lisson-id', status: domain_1.LessonStatus.finished, date: dateInFuture });\nawait collectionService_1.db.collection('test_lessons').doc(testLessonFromFuture.id).set(testLessonFromFuture);\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: testLessonFromFuture.id,\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').doc(testLessonFromFuture.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.finished);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "eec78390-3932-4ec8-8124-021bd5d6d31f",
              "parentUUID": "9252da12-ae46-430a-89b5-6db46cfe4009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Attempt to finalize lesson from other statuses then finished will fail with error",
              "fullTitle": "lesson finalization tests 3. Attempt to finalize lesson from other statuses then finished will fail with error",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const scheduledTestLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'scheduled-test-lisson-id', status: domain_1.LessonStatus.scheduled, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0 });\nawait collectionService_1.db.collection('test_lessons').doc(scheduledTestLesson.id).set(scheduledTestLesson);\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: scheduledTestLesson.id,\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').doc(scheduledTestLesson.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.scheduled);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "b0727a63-d4d3-4a44-88d0-a66b0222b671",
              "parentUUID": "9252da12-ae46-430a-89b5-6db46cfe4009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "4. Accepted user abonements will be consumed after lesson finalization",
              "fullTitle": "lesson finalization tests 4. Accepted user abonements will be consumed after lesson finalization",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testLessonWithAccepted = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-accepted-id', status: domain_1.LessonStatus.finished, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0, accepted: [\n        'test-user1-id',\n        'test-user2-id',\n    ], declained: [\n        'test-user3-id',\n    ] });\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithAccepted.id).set(testLessonWithAccepted);\nconst testUser1LimitLessons = await chekAbonementLimitFunction('test-user1-id');\nconst testUser2LimitLessons = await chekAbonementLimitFunction('test-user2-id');\nconst testUser3LimitLessons = await chekAbonementLimitFunction('test-user3-id');\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: testLessonWithAccepted.id,\n    });\n}, Error);\nconst checkTestUser1LimitLessons = await chekAbonementLimitFunction('test-user1-id');\nconst checkTestUser2LimitLessons = await chekAbonementLimitFunction('test-user2-id');\nconst checkTestUser3LimitLessons = await chekAbonementLimitFunction('test-user3-id');\nassert.equal(testUser1LimitLessons, checkTestUser1LimitLessons - 1);\nassert.equal(testUser2LimitLessons, checkTestUser2LimitLessons - 1);\nassert.equal(testUser3LimitLessons, checkTestUser3LimitLessons);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "eb6eba27-acd0-468f-949a-4375ff174f8d",
              "parentUUID": "9252da12-ae46-430a-89b5-6db46cfe4009",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5. When lesson is finalezed, teacher and students will get notification",
              "fullTitle": "lesson finalization tests 5. When lesson is finalezed, teacher and students will get notification",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testLessonWithAcceptedAndTeacher = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-accepted&teacher-id', status: domain_1.LessonStatus.finished, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0, teacherId: 'test-teacher-id', accepted: [\n        'test-user1-id',\n        'test-user2-id',\n    ], declained: [\n        'test-user3-id',\n    ] });\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithAcceptedAndTeacher.id).set(testLessonWithAcceptedAndTeacher);\nconst testUser1Notification = await checkSendedNotifications('test-user1-id');\nconst testUser2Notification = await checkSendedNotifications('test-user2-id');\nconst testUser3Notification = await checkSendedNotifications('test-user3-id');\nconst testTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: testLessonWithAcceptedAndTeacher.id,\n    });\n}, Error);\nconst checkTestUser1Notification = await checkSendedNotifications('test-user1-id');\nconst checkTestUser2Notification = await checkSendedNotifications('test-user2-id');\nconst checkTestUser3Notification = await checkSendedNotifications('test-user3-id');\nconst checkTestTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.equal(testUser1Notification, checkTestUser1Notification + 1);\nassert.equal(testUser2Notification, checkTestUser2Notification + 1);\nassert.equal(testUser3Notification, checkTestUser3Notification);\nassert.equal(testTeacherNotification, checkTestTeacherNotification + 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "fea67700-12a2-42e1-ac37-f056e7840f2a",
              "parentUUID": "9252da12-ae46-430a-89b5-6db46cfe4009",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f3ae67ce-f498-4c2d-a0ea-8bf787bc47ba",
            "eec78390-3932-4ec8-8124-021bd5d6d31f",
            "b0727a63-d4d3-4a44-88d0-a66b0222b671",
            "eb6eba27-acd0-468f-949a-4375ff174f8d",
            "fea67700-12a2-42e1-ac37-f056e7840f2a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10005,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12563a6e-e2c4-46b7-8175-580ecd052fb5",
          "title": " cancel Lesson Function tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts",
          "file": "/src/functions/lessonFinalization.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Can cancel lesson from scheduled and coming soon status to canceled status",
              "fullTitle": " cancel Lesson Function tests 1. Can cancel lesson from scheduled and coming soon status to canceled status",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const scheduledTestLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'scheduled-test-lisson-id', status: domain_1.LessonStatus.scheduled, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0 });\nconst commingSoonTestLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'coming-soon-test-lisson-id', status: domain_1.LessonStatus.commingSoon, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0 });\nawait collectionService_1.db.collection('test_lessons').doc(scheduledTestLesson.id).set(scheduledTestLesson);\nawait collectionService_1.db.collection('test_lessons').doc(commingSoonTestLesson.id).set(commingSoonTestLesson);\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/cancelLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: scheduledTestLesson.id,\n    });\n}, Error);\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/cancelLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: commingSoonTestLesson.id,\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').doc(scheduledTestLesson.id).get();\nconst scheduledTestLessonData = snap.data();\nassert.deepEqual(scheduledTestLessonData.status, domain_1.LessonStatus.canceled);\nconst snap2 = await collectionService_1.db.collection('test_lessons').doc(commingSoonTestLesson.id).get();\nconst commingSoonTestLessonData = snap2.data();\nassert.deepEqual(commingSoonTestLessonData.status, domain_1.LessonStatus.canceled);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "1a69069d-7bc5-4127-9f79-ed8690e191bd",
              "parentUUID": "12563a6e-e2c4-46b7-8175-580ecd052fb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2. You can not finalize canceled lesson ",
              "fullTitle": " cancel Lesson Function tests 2. You can not finalize canceled lesson ",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const canceledTestLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'canceled-test-lisson-id', status: domain_1.LessonStatus.canceled, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0 });\nawait collectionService_1.db.collection('test_lessons').doc(canceledTestLesson.id).set(canceledTestLesson);\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/finalizeLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: canceledTestLesson.id,\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').doc(canceledTestLesson.id).get();\nconst data = snap.data();\nassert.deepEqual(data.status, domain_1.LessonStatus.canceled);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "8c25979f-b148-4e9b-bc3d-153a688c8045",
              "parentUUID": "12563a6e-e2c4-46b7-8175-580ecd052fb5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Both accepted and declained users abonements will not be consumed after lesson cancelation",
              "fullTitle": " cancel Lesson Function tests 3. Both accepted and declained users abonements will not be consumed after lesson cancelation",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testLessonWithAccepted = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-accepted-id', status: domain_1.LessonStatus.scheduled, date: cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0, accepted: [\n        'test-user1-id',\n        'test-user2-id',\n    ], declained: [\n        'test-user3-id',\n    ] });\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithAccepted.id).set(testLessonWithAccepted);\nconst testUser1LimitLessons = await chekAbonementLimitFunction('test-user1-id');\nconst testUser2LimitLessons = await chekAbonementLimitFunction('test-user2-id');\nconst testUser3LimitLessons = await chekAbonementLimitFunction('test-user3-id');\nassert.throws(async () => {\n    await fetch.default('http://127.0.0.1:5001/abonement-58b38/us-central1/cancelLesson', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'text/plain',\n        },\n        body: testLessonWithAccepted.id,\n    });\n}, Error);\nconst checkTestUser1LimitLessons = await chekAbonementLimitFunction('test-user1-id');\nconst checkTestUser2LimitLessons = await chekAbonementLimitFunction('test-user2-id');\nconst checkTestUser3LimitLessons = await chekAbonementLimitFunction('test-user3-id');\nassert.equal(testUser1LimitLessons, checkTestUser1LimitLessons);\nassert.equal(testUser2LimitLessons, checkTestUser2LimitLessons);\nassert.equal(testUser3LimitLessons, checkTestUser3LimitLessons);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonFinalization.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "2f390afa-f88c-4b8b-8ada-027f8a50dc9f",
              "parentUUID": "12563a6e-e2c4-46b7-8175-580ecd052fb5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1a69069d-7bc5-4127-9f79-ed8690e191bd",
            "8c25979f-b148-4e9b-bc3d-153a688c8045",
            "2f390afa-f88c-4b8b-8ada-027f8a50dc9f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6004,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c363334-0de4-4b4c-9f75-5dc72f89c2f6",
          "title": "lesson Scheduler Function tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For every rule that require us to create a new lesson within lessonCreationTimeInterval the single entity of lesson is created ",
              "fullTitle": "lesson Scheduler Function tests For every rule that require us to create a new lesson within lessonCreationTimeInterval the single entity of lesson is created ",
              "timedOut": true,
              "duration": 2019,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const scheduledTestRule1 = Object.assign(Object.assign({}, exports.testRule), { id: 'scheduledTestRule1Id', periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [new Date(Date.now() + lessonScheduler_1.lessonCreationTimeInterval + 100)],\n    } });\nconst scheduledTestRule2 = Object.assign(Object.assign({}, exports.testRule), { id: 'scheduledTestRule2Id', periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [new Date(Date.now() - (lessonScheduler_1.lessonCreationTimeInterval - 100))],\n    } });\nconst scheduledTestRule3 = Object.assign(Object.assign({}, exports.testRule), { id: 'scheduledTestRule3Id', periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [new Date(Date.now())],\n    } });\nconst testRules = [\n    scheduledTestRule1,\n    scheduledTestRule2,\n    scheduledTestRule3,\n];\nawait Promise.all(testRules.map(async (rule) => {\n    await collectionService_1.db.collection('test_rules').doc(rule.id).set(rule);\n}));\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonSchedulerFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst createdLessonQuery = collectionService_1.db.collection('test_lesson').orderBy('date', 'desc').limit(1);\nconst snap = await createdLessonQuery.get();\nconst data = snap.docs[0].data();\nassert.deepEqual(data.ruleId, scheduledTestRule3.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "f8bb7dfa-3a7f-4b24-bc06-3b3f9d2b61b2",
              "parentUUID": "8c363334-0de4-4b4c-9f75-5dc72f89c2f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When the lesson is scheduled the teacher notifications appear",
              "fullTitle": "lesson Scheduler Function tests When the lesson is scheduled the teacher notifications appear",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await collectionService_1.db.collection('test_rules').doc(exports.testRule.id).set(exports.testRule);\nconst countNotification = await checkSendedNotifications('testTeacherId');\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonSchedulerFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst newCountNotification = await checkSendedNotifications('testTeacherId');\nassert.deepEqual(newCountNotification, countNotification + 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "92ed0ef5-46e4-43e8-a09a-98aed9f37ce9",
              "parentUUID": "8c363334-0de4-4b4c-9f75-5dc72f89c2f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f8bb7dfa-3a7f-4b24-bc06-3b3f9d2b61b2",
            "92ed0ef5-46e4-43e8-a09a-98aed9f37ce9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4019,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9819cd15-53c7-4f7b-b5dd-2c1a7de26448",
          "title": "lessonComingSoonUpdaterFunction tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For every lesson that is scheduled in less then lessonComingSoonTimeInterval the status changed to commingSoon",
              "fullTitle": "lessonComingSoonUpdaterFunction tests For every lesson that is scheduled in less then lessonComingSoonTimeInterval the status changed to commingSoon",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const dateInlessonComingSoonTimeInterval = new Date(Date.now() - (lessonScheduler_1.lessonComingSoonTimeInterval - 100));\nconst dateOutlessonComingSoonTimeInterval = new Date(Date.now() - (lessonScheduler_1.lessonComingSoonTimeInterval + 100));\nconst scheduledLesson1 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson1-id', status: domain_1.LessonStatus.scheduled, date: dateInlessonComingSoonTimeInterval });\nconst scheduledLesson2 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson2-id', status: domain_1.LessonStatus.scheduled, date: dateOutlessonComingSoonTimeInterval });\nconst scheduledLesson3 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson3-id', status: domain_1.LessonStatus.canceled, date: dateInlessonComingSoonTimeInterval });\nconst doneLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson4-id', status: domain_1.LessonStatus.done, date: dateInlessonComingSoonTimeInterval });\nconst finishedLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson5-id', status: domain_1.LessonStatus.finished, date: dateInlessonComingSoonTimeInterval });\nconst inProcessLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.inProcess, date: dateInlessonComingSoonTimeInterval });\nconst testLessons = [\n    scheduledLesson1,\n    scheduledLesson2,\n    scheduledLesson3,\n    doneLesson,\n    finishedLesson,\n    inProcessLesson,\n];\nawait Promise.all(testLessons.map(async (lesson) => {\n    await collectionService_1.db.collection('test_lessons').doc(lesson.id).set(lesson);\n}));\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonComingSoonUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').get();\nconst data = snap.docs.map((doc) => doc.data());\nconst checkLesson = data.filter((lesson) => lesson.status === domain_1.LessonStatus.commingSoon);\nassert.deepEqual(checkLesson.length, 1);\nassert.equal(checkLesson[0].id, scheduledLesson1.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "cddaa1fc-5648-456c-8981-5b0e11136b28",
              "parentUUID": "9819cd15-53c7-4f7b-b5dd-2c1a7de26448",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When the lesson is commingSoon the teacher and users notifications appear",
              "fullTitle": "lessonComingSoonUpdaterFunction tests When the lesson is commingSoon the teacher and users notifications appear",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testLessonWithTeacherId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-teacher-id', status: domain_1.LessonStatus.scheduled, date: new Date(Date.now() - (lessonScheduler_1.lessonComingSoonTimeInterval - 100)), teacherId: 'test-teacher-id' });\nconst testUsers = [\n    {\n        id: 'test-user1-id',\n        name: 'test-user1-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user2-id',\n        name: 'test-user2-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user3-id',\n        name: 'test-user3-name',\n        avatar: '',\n    },\n];\nawait Promise.all(testUsers.map(async (user) => {\n    await collectionService_1.db.collection('test_users').doc(user.id).set(user);\n}));\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithTeacherId.id).set(testLessonWithTeacherId);\nconst testUser1Notification = await checkSendedNotifications('test-user1-id');\nconst testUser2Notification = await checkSendedNotifications('test-user2-id');\nconst testUser3Notification = await checkSendedNotifications('test-user3-id');\nconst testTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonComingSoonUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst checkTestUser1Notification = await checkSendedNotifications('test-user1-id');\nconst checkTestUser2Notification = await checkSendedNotifications('test-user2-id');\nconst checkTestUser3Notification = await checkSendedNotifications('test-user3-id');\nconst checkTestTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.equal(testUser1Notification, checkTestUser1Notification + 1);\nassert.equal(testUser2Notification, checkTestUser2Notification + 1);\nassert.equal(testUser3Notification, checkTestUser3Notification + 1);\nassert.equal(testTeacherNotification, checkTestTeacherNotification + 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "67d3245a-da37-4d63-9295-7a05707c2c99",
              "parentUUID": "9819cd15-53c7-4f7b-b5dd-2c1a7de26448",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cddaa1fc-5648-456c-8981-5b0e11136b28",
            "67d3245a-da37-4d63-9295-7a05707c2c99"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4003,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95cd9d09-4ab0-4618-b731-d3bc26af901f",
          "title": "lessonStartsUpdaterFunction tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For commingSoon lessons that has date less then now and not greater then date + duration the status changed to starts",
              "fullTitle": "lessonStartsUpdaterFunction tests For commingSoon lessons that has date less then now and not greater then date + duration the status changed to starts",
              "timedOut": true,
              "duration": 2003,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const tooEarly = new Date(Date.now() - 100);\nconst startTime = new Date();\nconst tooLate = new Date(Date.now() + lessonScheduler_1.lessonComingSoonTimeInterval);\nconst commingSoonLesson1 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson1-id', status: domain_1.LessonStatus.commingSoon, date: startTime });\nconst commingSoonLesson2 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson2-id', status: domain_1.LessonStatus.commingSoon, date: tooEarly });\nconst commingSoonLesson3 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson3-id', status: domain_1.LessonStatus.commingSoon, date: tooLate });\nconst doneLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson4-id', status: domain_1.LessonStatus.done, date: startTime });\nconst finishedLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson5-id', status: domain_1.LessonStatus.finished, date: startTime });\nconst scheduledLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.scheduled, date: startTime });\nconst testLessons = [\n    commingSoonLesson1,\n    commingSoonLesson2,\n    commingSoonLesson3,\n    doneLesson,\n    finishedLesson,\n    scheduledLesson,\n];\nawait Promise.all(testLessons.map(async (lesson) => {\n    await collectionService_1.db.collection('test_lessons').doc(lesson.id).set(lesson);\n}));\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonStartsUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').get();\nconst data = snap.docs.map((doc) => doc.data());\nconst checkLesson = data.filter((lesson) => lesson.status === domain_1.LessonStatus.inProcess);\nassert.deepEqual(checkLesson.length, 1);\nassert.equal(checkLesson[0].id, commingSoonLesson1.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "00922d29-b10f-4d04-b448-2816370134e1",
              "parentUUID": "95cd9d09-4ab0-4618-b731-d3bc26af901f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "00922d29-b10f-4d04-b448-2816370134e1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2003,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e144caa5-7cd0-4922-8531-15aae700bf3b",
          "title": "lessonFinishedUpdaterFunction tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For started lessons that has date + duration less then now the status changed to finished",
              "fullTitle": "lessonFinishedUpdaterFunction tests For started lessons that has date + duration less then now the status changed to finished",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const inProcessStartTime = new Date(Date.now() - (oneHourDuration - 100));\nconst finishedStartTime = new Date(Date.now() - (oneHourDuration + 100));\nconst commingSoonStartTime = new Date(Date.now() - (oneHourDuration * 2));\nconst inProcessLesson1 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson1-id', status: domain_1.LessonStatus.inProcess, durationMin: 60, date: finishedStartTime });\nconst inProcessLesson2 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson2-id', status: domain_1.LessonStatus.inProcess, date: inProcessStartTime });\nconst inProcessLesson3 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson3-id', status: domain_1.LessonStatus.inProcess, date: commingSoonStartTime });\nconst doneLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson4-id', status: domain_1.LessonStatus.done, date: finishedStartTime });\nconst commingSoonLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson5-id', status: domain_1.LessonStatus.commingSoon, date: finishedStartTime });\nconst scheduledLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.scheduled, date: finishedStartTime });\nconst testLessons = [\n    inProcessLesson1,\n    inProcessLesson2,\n    inProcessLesson3,\n    doneLesson,\n    commingSoonLesson,\n    scheduledLesson,\n];\nawait Promise.all(testLessons.map(async (lesson) => {\n    await collectionService_1.db.collection('test_lessons').doc(lesson.id).set(lesson);\n}));\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonFinishedUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').get();\nconst data = snap.docs.map((doc) => doc.data());\nconst checkLesson = data.filter((lesson) => lesson.status === domain_1.LessonStatus.finished);\nassert.deepEqual(checkLesson.length, 1);\nassert.equal(checkLesson[0].id, inProcessLesson1.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "c4918bfc-e983-48d2-8428-0ea66e9a258f",
              "parentUUID": "e144caa5-7cd0-4922-8531-15aae700bf3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c4918bfc-e983-48d2-8428-0ea66e9a258f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "176d70cf-e38f-4a42-8cff-2c3324686956",
          "title": "lessonFinalizedUpdaterFunction tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "For finished lessons that has date + duration + lessonFinalizedTimeInterval less then now the status changed to finalized",
              "fullTitle": "lessonFinalizedUpdaterFunction tests For finished lessons that has date + duration + lessonFinalizedTimeInterval less then now the status changed to finalized",
              "timedOut": true,
              "duration": 2002,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const tooEarlyFiniz = new Date(Date.now() - (oneHourDuration + lessonScheduler_1.lessonFinalizedTimeInterval - 100));\nconst finalizedTime = new Date(Date.now() - (oneHourDuration + lessonScheduler_1.lessonFinalizedTimeInterval + 100));\nconst sheduledTime = new Date(Date.now() + (oneHourDuration * 2));\nconst finishedLesson1 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson1-id', status: domain_1.LessonStatus.finished, durationMin: 60, date: finalizedTime });\nconst finishedLesson2 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson2-id', status: domain_1.LessonStatus.finished, date: tooEarlyFiniz });\nconst finishedLesson3 = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson3-id', status: domain_1.LessonStatus.finished, date: sheduledTime });\nconst inProcessLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson4-id', status: domain_1.LessonStatus.inProcess, date: finalizedTime });\nconst commingSoonLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson5-id', status: domain_1.LessonStatus.commingSoon, date: finalizedTime });\nconst scheduledLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.scheduled, date: finalizedTime });\nconst testLessons = [\n    finishedLesson1,\n    finishedLesson2,\n    finishedLesson3,\n    inProcessLesson,\n    commingSoonLesson,\n    scheduledLesson,\n];\nawait Promise.all(testLessons.map(async (lesson) => {\n    await collectionService_1.db.collection('test_lessons').doc(lesson.id).set(lesson);\n}));\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonFinalizedUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').get();\nconst data = snap.docs.map((doc) => doc.data());\nconst checkLesson = data.filter((lesson) => lesson.status === domain_1.LessonStatus.done);\nassert.deepEqual(checkLesson.length, 1);\nassert.equal(checkLesson[0].id, finishedLesson1.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "d8bf2513-8797-4132-9df8-830c736dc70b",
              "parentUUID": "176d70cf-e38f-4a42-8cff-2c3324686956",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "When the lesson is finalized the teacher and users notifications appear",
              "fullTitle": "lessonFinalizedUpdaterFunction tests When the lesson is finalized the teacher and users notifications appear",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const testLessonWithTeacherId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-teacher-id', status: domain_1.LessonStatus.finished, date: new Date(Date.now() - (oneHourDuration + lessonScheduler_1.lessonFinalizedTimeInterval + 100)), teacherId: 'test-teacher-id', accepted: [\n        'test-user1-id',\n        'test-user2-id',\n    ], declained: [\n        'test-user3-id'\n    ] });\nconst testUsers = [\n    {\n        id: 'test-user1-id',\n        name: 'test-user1-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user2-id',\n        name: 'test-user2-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user3-id',\n        name: 'test-user3-name',\n        avatar: '',\n    },\n];\nawait Promise.all(testUsers.map(async (user) => {\n    await collectionService_1.db.collection('test_users').doc(user.id).set(user);\n}));\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithTeacherId.id).set(testLessonWithTeacherId);\nconst testUser1Notification = await checkSendedNotifications('test-user1-id');\nconst testUser2Notification = await checkSendedNotifications('test-user2-id');\nconst testUser3Notification = await checkSendedNotifications('test-user3-id');\nconst testTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.throws(async () => {\n    await (0, lessonScheduler_1.lessonFinalizedUpdaterFunction)({\n        eventId: 'test-event-id',\n        timestamp: Date.now().toString(),\n        params: {},\n        eventType: 'test-event-type',\n        resource: {\n            service: 'test-service',\n            name: 'test-name',\n        },\n    });\n}, Error);\nconst checkTestUser1Notification = await checkSendedNotifications('test-user1-id');\nconst checkTestUser2Notification = await checkSendedNotifications('test-user2-id');\nconst checkTestUser3Notification = await checkSendedNotifications('test-user3-id');\nconst checkTestTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.equal(testUser1Notification, checkTestUser1Notification + 1);\nassert.equal(testUser2Notification, checkTestUser2Notification + 1);\nassert.equal(testUser3Notification, checkTestUser3Notification);\nassert.equal(testTeacherNotification, checkTestTeacherNotification + 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "550c1031-2c7c-40d0-879c-e5b6da1fa585",
              "parentUUID": "176d70cf-e38f-4a42-8cff-2c3324686956",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d8bf2513-8797-4132-9df8-830c736dc70b",
            "550c1031-2c7c-40d0-879c-e5b6da1fa585"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4003,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a18d13ba-5df6-4135-ab87-afa06699df0b",
          "title": "Rule change lesson updater tests",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts",
          "file": "/src/functions/lessonScheduler.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "If the rule is changed scheduled lessons are changed",
              "fullTitle": "Rule change lesson updater tests If the rule is changed scheduled lessons are changed",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const lessonUpdaterTestRule = Object.assign(Object.assign({}, exports.testRule), { id: 'lessonUpdaterTestRuleId', periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0],\n    } });\nawait collectionService_1.db.collection('test_rules').doc(lessonUpdaterTestRule.id).set(lessonUpdaterTestRule);\nconst scheduledLessonWithTrueRuleId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson1-id', status: domain_1.LessonStatus.scheduled, ruleId: 'lessonUpdaterTestRuleId' });\nconst scheduledLessonWithoutRuleId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson2-id', status: domain_1.LessonStatus.scheduled, ruleId: undefined });\nconst scheduledLessonWithFolseRuleId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson3-id', status: domain_1.LessonStatus.scheduled, ruleId: 'test-rule-id' });\nconst doneLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson4-id', status: domain_1.LessonStatus.done, ruleId: lessonUpdaterTestRule.id });\nconst finishedLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson5-id', status: domain_1.LessonStatus.finished, ruleId: lessonUpdaterTestRule.id });\nconst inProcessLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.inProcess, ruleId: lessonUpdaterTestRule.id });\nconst canceledLesson = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson6-id', status: domain_1.LessonStatus.canceled, ruleId: lessonUpdaterTestRule.id });\nconst testLessons = [\n    scheduledLessonWithTrueRuleId,\n    scheduledLessonWithoutRuleId,\n    scheduledLessonWithFolseRuleId,\n    doneLesson,\n    finishedLesson,\n    inProcessLesson,\n    canceledLesson\n];\nawait Promise.all(testLessons.map(async (lesson) => {\n    await collectionService_1.db.collection('test_lessons').doc(lesson.id).set(lesson);\n}));\nconst newDate = new Date(cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0.getTime() + lessonScheduler_1.lessonComingSoonTimeInterval);\nawait collectionService_1.db.collection('test_rules').doc(lessonUpdaterTestRule.id).update({\n    periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [newDate],\n    }\n});\nassert.throws(async () => {\n    await changeRuleLessonUpdaterFunction(lessonUpdaterTestRule.id);\n}, Error);\nconst snap = await collectionService_1.db.collection('test_lessons').get();\nconst data = snap.docs.map((doc) => doc.data());\nconst checkLesson = data.filter((lesson) => lesson.date === newDate);\nassert.deepEqual(checkLesson.length, 1);\nassert.equal(checkLesson[0].id, scheduledLessonWithTrueRuleId.id);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "8cf25d4e-8a32-4607-943d-316cb4ad8a5f",
              "parentUUID": "a18d13ba-5df6-4135-ab87-afa06699df0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "If the rule is changed teacher and users notifications appear",
              "fullTitle": "Rule change lesson updater tests If the rule is changed teacher and users notifications appear",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const lessonUpdaterNotificationsTestRule = Object.assign(Object.assign({}, exports.testRule), { id: 'lessonUpdaterTestRuleId', periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0],\n    } });\nawait collectionService_1.db.collection('test_rules').doc(lessonUpdaterNotificationsTestRule.id).set(lessonUpdaterNotificationsTestRule);\nconst testLessonWithRuleId = Object.assign(Object.assign({}, cloudFunctionTemplate_test_1.testLesson), { id: 'test-lisson-with-rule-id', status: domain_1.LessonStatus.finished, teacherId: 'test-teacher-id', ruleId: lessonUpdaterNotificationsTestRule.id, accepted: [\n        'test-user1-id',\n        'test-user2-id',\n    ], declained: [\n        'test-user3-id'\n    ] });\nconst testUsers = [\n    {\n        id: 'test-user1-id',\n        name: 'test-user1-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user2-id',\n        name: 'test-user2-name',\n        avatar: '',\n    },\n    {\n        id: 'test-user3-id',\n        name: 'test-user3-name',\n        avatar: '',\n    },\n];\nawait Promise.all(testUsers.map(async (user) => {\n    await collectionService_1.db.collection('test_users').doc(user.id).set(user);\n}));\nawait collectionService_1.db.collection('test_lessons').doc(testLessonWithRuleId.id).set(testLessonWithRuleId);\nconst testUser1Notification = await checkSendedNotifications('test-user1-id');\nconst testUser2Notification = await checkSendedNotifications('test-user2-id');\nconst testUser3Notification = await checkSendedNotifications('test-user3-id');\nconst testTeacherNotification = await checkSendedNotifications('test-teacher-id');\nconst newDate = new Date(cloudFunctionTemplate_test_1.mochDate2023_7_14_15_30_0.getTime() + lessonScheduler_1.lessonComingSoonTimeInterval);\nawait collectionService_1.db.collection('test_rules').doc(lessonUpdaterNotificationsTestRule.id).update({\n    periodicity: {\n        periodicityType: domain_1.PeriodicityType.manualDate,\n        periodicityRule: [newDate],\n    }\n});\nassert.throws(async () => {\n    await changeRuleLessonUpdaterFunction(lessonUpdaterNotificationsTestRule.id);\n}, Error);\nconst checkTestUser1Notification = await checkSendedNotifications('test-user1-id');\nconst checkTestUser2Notification = await checkSendedNotifications('test-user2-id');\nconst checkTestUser3Notification = await checkSendedNotifications('test-user3-id');\nconst checkTestTeacherNotification = await checkSendedNotifications('test-teacher-id');\nassert.equal(testUser1Notification, checkTestUser1Notification + 1);\nassert.equal(testUser2Notification, checkTestUser2Notification + 1);\nassert.equal(testUser3Notification, checkTestUser3Notification);\nassert.equal(testTeacherNotification, checkTestTeacherNotification + 1);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/runner/work/abonement/abonement/functions/src/functions/lessonScheduler.test.ts)\n    at listOnTimeout (node:internal/timers:559:17)\n    at processTimers (node:internal/timers:502:7)",
                "diff": null
              },
              "uuid": "c7385401-c2e0-4758-bf45-f6ba04fcbf0f",
              "parentUUID": "a18d13ba-5df6-4135-ab87-afa06699df0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8cf25d4e-8a32-4607-943d-316cb4ad8a5f",
            "c7385401-c2e0-4758-bf45-f6ba04fcbf0f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4002,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0da0f279-5b57-4930-8e6d-fcb002689fd6",
          "title": "Template test case. It show if the tests are able to run",
          "fullFile": "/home/runner/work/abonement/abonement/functions/src/services/serviceTest.test.ts",
          "file": "/src/services/serviceTest.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass",
              "fullTitle": "Template test case. It show if the tests are able to run should pass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.strictEqual(1, 1);",
              "err": {},
              "uuid": "eaa8a870-feb2-4b7c-8bac-d4493fca1fcf",
              "parentUUID": "0da0f279-5b57-4930-8e6d-fcb002689fd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eaa8a870-feb2-4b7c-8bac-d4493fca1fcf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}